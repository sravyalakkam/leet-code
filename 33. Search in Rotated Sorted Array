class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 1){
            return  nums[0] == target? 0 : -1;
        }
        int l = 0;
        int r = nums.length-1;
        int pivot = 0;
        boolean hasPivot = nums[l] > nums[r];

        if(hasPivot){
            while(l<=r){
                int m = l + (r-l)/2;
                if(m==0){
                    pivot = nums[m]>nums[m+1] ? r : l;
                    break;
                }
                if(nums[m] < nums[m-1]){
                    pivot = m;
                    break;
                }
                if(nums[m]>nums[m-1] && nums[m] < nums[m+1]){
                    if(nums[m]> nums[r]){
                        l = m+1;
                    }
                    else{
                        r = m-1;
                    }
                }
                else{
                    pivot = m+1;
                    break;
                }
            }

            if(target >= nums[0] && target <= nums[pivot-1]){
                l = 0;
                r = pivot-1;
            }
            else{
                l = pivot;
                r = nums.length-1;
            }
        }
        while(l<=r){
            int m = l + (r-l)/2;
            if(nums[m] == target){
                return m;
            } else if (nums[m]<target) {
                l = m+1;
            }
            else {
                r = m-1;
            }
        }
        return -1;
    }
}
